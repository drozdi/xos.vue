@import "../vars/breakpoint";
@import "../tools/breakpoint";

$-size: null;
$infix: null;
$-infix: null;
$infix-: null;

/*@mixin media-breakpoint ($value: md) {
	$str: breakpoint($value);
	@if $str == '' {
		@content;
	} @else {
		@media #{$str} {
			@content;
		}
	}
}*/
@mixin media-breakpoint-up ($name, $breakpoints: $breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}
@mixin media-breakpoint-down ($name, $breakpoints: $breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	} @else {
		@content;
	}
}
@mixin media-breakpoint-between ($lower, $upper, $breakpoints: $breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);
	@if $min != null and $max != null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	} @else if $max == null {
		@include media-breakpoint-up($lower, $breakpoints) {
			@content;
		}
	} @else if $min == null {
		@include media-breakpoint-down($upper, $breakpoints) {
			@content;
		}
	}
}
@mixin media-breakpoint-only ($name, $breakpoints: $breakpoints) {
	$min:  breakpoint-min($name, $breakpoints);
	$next: breakpoint-next($name, $breakpoints);
	$max:  breakpoint-max($next);
	@if $min != null and $max != null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	} @else if $max == null {
		@include media-breakpoint-up($name, $breakpoints) {
			@content;
		}
	} @else if $min == null {
		@include media-breakpoint-down($next, $breakpoints) {
			@content;
		}
	}
}

@mixin each-breakpoint-infix {
	@each $breakpoint in map-keys($breakpoints) {
		@include media-breakpoint-up($breakpoint) {
			$infix: breakpoint-infix($breakpoint, $breakpoints) !global;
			$-infix: if($infix, "-#{$infix}", null) !global;
			$infix-: if($infix, "#{$infix}-", null) !global;
			@content;
		}
	}
}
@mixin each-breakpoint-infix-reverse {
	$map: map-keys($breakpoints);
	$i: length($map);
	$result: ();
	@while $i > 0 {
		$result: append($result, nth($map, $i), space);
		$i: $i - 1;
	}
	@each $breakpoint in $result {
		@include media-breakpoint-up($breakpoint) {
			$infix: breakpoint-infix($breakpoint, $breakpoints) !global;
			$-infix: if($infix, "-#{$infix}", null) !global;
			$infix-: if($infix, "#{$infix}-", null) !global;
			@content;
		}
	}
}
@mixin each-breakpoint ($map: map-keys($breakpoints)) {
	@include each-breakpoint-size($map) {
		@include media-breakpoint($-size) {
			@content;
		}
	}
}
@mixin each-breakpoint-reverse ($map: map-keys($breakpoints))  {
	@include each-breakpoint-size-reverse($map) {
		@include media-breakpoint($-size) {
			@content;
		}
	}
}
@mixin each-breakpoint-size ($map: map-keys($breakpoints)) {
	@each $size in $map {
		$-size: $size !global;
		@content;
	}
}
@mixin each-breakpoint-size-reverse ($map: map-keys($breakpoints)) {
	$i: length($map);
	$result: ();
	@while $i > 0 {
		$result: append($result, nth($map, $i), space);
		$i: $i - 1;
	}
	
	@include each-breakpoint-size($result) {
		@content;
	}
}
