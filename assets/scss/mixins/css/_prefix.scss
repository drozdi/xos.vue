$current-prefix: null;
$prefix-context: null;

$all-prefixed: webkit khtml moz ms o;
$css-prefixed: webkit moz ms o;
$css-short-prefixed: webkit moz ms;


@function set-arglist-default ($arglist, $default) {
	$default-index: index($arglist, default);
	@if $default-index {
		$arglist: set-nth($arglist, $default-index, $default)
	}
	@return if(length($arglist) > 0, $arglist, $default);
}
@function prefixes-for-capability ($capability) {
	$result: ();
	$prefixes: $all-prefixed;
	@if $capability == css-border-radius {
		$prefixes: $css-short-prefixed;
	} @else if $capability == css-box-sizing {
		$prefixes: $css-short-prefixed;
	} @else if $capability == css-box-shadow {
		$prefixes: $css-short-prefixed;
	} @else if $capability == css-animation {
		$prefixes: $css-prefixed;
	} @else if $capability == css-transitions {
		$prefixes: $css-prefixed;
	} @else if $capability == css-opacity {
		$prefixes: $css-prefixed;
	} @else if $capability == css-appearance {
		$prefixes: $css-short-prefixed;
	} @else if $capability == css-transforms-2d {
		$prefixes: $css-prefixed;
	} @else if $capability == css-transforms-3d {
		$prefixes: $css-prefixed;
	} @else if $capability == css-flexbox {
		$prefixes: $css-short-prefixed;
	}

	@each $prefix in $prefixes {
		$result: append($result, "-#{$prefix}");
	} 
	@return $result;
}
@function legacy-box ($box) {
	$box: unquote($box);
	@if $box == padding-box { $box: padding; }
	@if $box == border-box { $box: border; }
	@if $box == content-box { $box: content; }
	@return $box;
}
@mixin with-prefix ($prefix) {
	@if $current-prefix or $prefix-context {
		@if $current-prefix == $prefix or $prefix-context == $prefix {
			$old-prefix-context: $prefix-context;
			$old-prefix: $current-prefix;
			$prefix-context: $prefix-context or $current-prefix !global;
			$current-prefix: $prefix !global;
			@content;
			$prefix-context: $old-prefix-context !global;
			$current-prefix: $old-prefix !global;
		} @else if $prefix == null {
			$old-prefix-context: $prefix-context;
			$prefix-context: $prefix-context or $current-prefix !global;
			$current-prefix: null !global;
			@content;
			$current-prefix: $prefix-context !global;
			$prefix-context: $old-prefix-context !global;
		}
	} @else {
		$prefix-context: $prefix !global;
		$current-prefix: $prefix !global;
		@content;
		$current-prefix: null !global;
		$prefix-context: null !global;
	}
}
@mixin with-each-prefix ($capability) {
	@if $ENABBLE-PREFIX {
		@each $prefix in prefixes-for-capability($capability) {
			@include with-prefix($prefix) {
				@content;
			}
		}
	}
	@include with-prefix(null) {
		@content;
	}
}

@function prefix-identifier ($ident, $prefix: $current-prefix) {
	@return unquote("#{$prefix}#{if($prefix, '-', null)}#{$ident}");
}
@mixin prefix-prop ($property, $value, $prefix: $current-prefix) {
	#{prefix-identifier($property, $prefix)}: $value;
}
@mixin prefixed-properties ($capability, $properties) {
	@include with-each-prefix($capability) {
		@each $prop, $value in $properties {
			@include prefix-prop($prop, $value);
		}
	}
}