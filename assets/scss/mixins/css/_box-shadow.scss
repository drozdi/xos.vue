//Box shadow
$default-box-shadow-color: #333333 !default;
$default-box-shadow-h-offset: 0px !default;
$default-box-shadow-v-offset: 0px !default;
$default-box-shadow-blur: 5px !default;
$default-box-shadow-spread: null !default;
$default-box-shadow-inset: null !default;
@function default-box-shadow () {
	@return compact(if($default-box-shadow-inset, inset, null)
		$default-box-shadow-h-offset
		$default-box-shadow-v-offset
		$default-box-shadow-blur
		$default-box-shadow-spread
		$default-box-shadow-color);
}
@mixin box-shadow ($shadow...) {
	$shadow: set-arglist-default($shadow, none);
	@include prefixed-properties(css-box-shadow, (box-shadow: $shadow));
}
@mixin single-box-shadow (
  $hoff: null,
  $voff: null,
  $blur: null,
  $spread: null,
  $color: null,
  $inset: $default-box-shadow-inset
) {
	@if not ($hoff == none or $hoff == null) and type-of($hoff) != number {
		@warn "The $color argument for single-box-shadow is now the 5th argument instead of the 1st.";
		$tmp-color: $color;
		$color: $hoff;
		$hoff: $voff;
		$voff: $blur;
		$blur: $spread;
		$spread: $tmp-color
	}
	@if $hoff   == null { $hoff:   $default-box-shadow-h-offset; }
	@if $voff   == null { $hoff:   $default-box-shadow-v-offset; }
	@if $blur   == null { $blur:   $default-box-shadow-blur;     }
	@if $spread == null { $spread: $default-box-shadow-spread;   }
	@if $color  == null { $color:  $default-box-shadow-color;    }
	
	@if not ($inset == true or $inset == false or $inset == null or $inset == inset) {
		@warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset";
	}

	@if $hoff == none {
		@include box-shadow(none);
	} @else {
		$full: $hoff $voff;
		@if $blur   { $full: $full $blur;   }
		@if $spread { $full: $full $spread; }
		@if $color  { $full: $full $color;  }
		@if $inset  { $full: inset $full;   }
		@include box-shadow($full);
	}
}