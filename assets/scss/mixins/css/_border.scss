@import './util';
$default-border-width: 0 !default;
$default-border-style: none !default;
$default-border-color: transparent !default;

@function border-width ($borders) {
	@return select-values-in-list($borders, number, $default-border-width);
}
@function border-style ($borders) {
	@return select-values-in-list($borders, string, $default-border-style);
}
@function border-color ($borders) {
	@return select-values-in-list($borders, color, $default-border-color);
}

@function border-split ($borders) {
	$border-map: ();
	$border-width: ();
	$border-style: ();
	$border-color: ();
	@if list-separator($borders) == comma {
		@each $border in $borders {
			$add-width: true;
			$add-style: true;
			$add-color: true;
			@each $val in $border {
				@if type-of($val) == number {
					$border-width: append($border-width, $val);
					$add-width: false;
				} @else if type-of($val) == color {
					$border-color: append($border-color, $val);
					$add-color: false;
				} @else if type-of($val) == string {
					$border-style: append($border-style, $val);	
					$add-style: false;
				}	
			}
			@if $add-width { $border-width: append($border-width, $default-border-width); }
			@if $add-style { $border-style: append($border-style, $default-border-style); }
			@if $add-color { $border-color: append($border-color, $default-border-color); }
		}
	} @else if list-separator($borders) == space {
		$add-width: true;
		$add-style: true;
		$add-color: true;
		@each $val in $borders {
			@if type-of($val) == number {
				$border-width: append($border-width, $val);
				$add-width: false;
			} @else if type-of($val) == color {
				$border-color: append($border-color, $val);
				$add-color: false;
			} @else if type-of($val) == string {
				$border-style: append($border-style, $val);	
				$add-style: false;
			}	
		}
		@if $add-width { $border-width: append($border-width, $default-border-width); }
		@if $add-style { $border-style: append($border-style, $default-border-style); }
		@if $add-color { $border-color: append($border-color, $default-border-color); }
	}
	$border-map: map-merge($border-map, (width: $border-width));
	$border-map: map-merge($border-map, (style: $border-style));
	$border-map: map-merge($border-map, (color: $border-color));
	@return $border-map;
}
@function border-map ($width, $style: null, $color: null) {
	@if type-of($width) != map and list-separator($width) == comma {
		$width: border-split($width);
	}
	@if type-of($width) == map {
		@if $style == null {
			$style: if(map-has-key($width, style), map-get($width, style), $default-border-style);
		}
		@if $color == null {
			$color: if(map-has-key($width, color), map-get($width, color), $default-border-color);
		}
		$width: if(map-has-key($width, width), map-get($width, width), $default-border-width);
	}
	@return (
		width: $width,
		style: $style,
		color: $color, 
	)
}

@mixin border-side (
	$side: all,
	$prop: all, 
	$width: $default-border-width, 
	$style: $default-border-style, 
	$color: $default-border-color
) {
	$sides: top right bottom left;
	$props: width style color;
	@if index($sides, $side) {
		$side: "-" + $side;	
	} @else {
		$side: "";	
	}
		
	$aProps: ();
	@if $prop == all {
		$aProps: $props;	
	} @else {
		@each $p in $prop {
			@if index($props, $p) {
				$aProps: append($aProps, $p);	
			}	
		}	
	}
	$width: val-compres($width);
	$style: val-compres($style);
	$color: val-compres($color);
	
	@if $prop != all or length($width) > 1 or length($style) > 1 or length($color) > 1 {
		border#{$side}: {
			@if index($aProps, width) { width: $width; }
			@if index($aProps, style) { style: $style; }
			@if index($aProps, color) { color: $color; }
		}
	} @else {
		border#{$side}: $width $style $color;
	}
}

@mixin border-sides ($width, $style: null, $color: null, $sides: all) {
	$border-map: border-map($width, $style, $color);
	$width: val-resize(map-get($border-map, width), 4);
	$style: val-resize(map-get($border-map, style), 4);
	$color: val-resize(map-get($border-map, color), 4);
	
	@each $side in (top, right, bottom, left) {
		@if index($sides, $side) {
			$i: get-index-side($side);
			border-#{$side}: nth($width, $i) nth($style, $i) nth($color, $i);
		}
	}
}
@mixin border-prop ($props, $width, $style: null, $color: null) {
	$border-map: border-map($width, $style, $color);
	border: {
		@if index($props, width) {
			width: val-compres(map-get($border-map, width));
		}
		@if index($props, style) {
			style: val-compres(map-get($border-map, style));
		}
		@if index($props, color) {
			color: val-compres(map-get($border-map, color));
		}
	}
}

@mixin border ($borders, $props: null) {
	@if type-of($borders) == map or list-separator($borders) == comma {
		@if $props == null { $props: width style color; }
		@include border-prop($props, $borders);	
	} @else {
		border: $borders;
	}
}

@mixin border-width ($borders) {
	@if type-of($borders) == map or list-separator($borders) == comma {
		@include border-prop(width, $borders);	
	} @else {
		border-width: border-width($borders);
	}
}