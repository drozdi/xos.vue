@import "../vars/alias";

$separator_namespace: '-' !default;
$separator_name: '__' !default;
$separator_modification: '--' !default;

$_namespaces: () !default;

@function get-alias ($name) {
  @if str-index($name, '@') != 1 {
    @return $name;
  }
  $name: str-slice($name, 2);
  @if (map-has-key($alias-names, $name)) {
    $name: map-get($alias-names, $name);
  }
  @return $name;
}
@function get-namespace ($start: 1, $end: null) {
  $ret: '';
  $add: false;
  $l: null;
  @if $end == null {
    $end: length($_namespaces);
  }
  @if $end < 0 {
    $end: $end + length($_namespaces);
  }
  @if $start < 0 {
    $start: $start + length($_namespaces);
  }
  @if $start - 1 < length($_namespaces) and $start < $end + 1 {
    @for $i from $start through $end {
      $l: nth($_namespaces, $i);
      @if $l { $l: get-alias(unquote($l)); }
      @if $l and $add { $l: if($separator_namespace, $separator_namespace, '') + $l; }
      @if $l and not $add { $add: true; }
      @if $l { $ret: $ret + $l; }
    }
  }
  @return $ret;
}
@function get-elements ($prefix: '', $elems: null) {
  $sep_name: if($separator_name and $prefix != '', $separator_name, '');
  $prefix: '.' + if($prefix, $prefix, '');
  $arRet: $prefix;
  @if $elems {
    $c: ' ' '>';
    $arRet: ();
    @each $elem in $elems {
      $e: $elem;
      @if $e { $e: get-alias(unquote($elem)); }
      $e: if($e, if(index($c, str-slice($e, 1, 1)) != null, ' ' + $e, $sep_name + $e), '');
      $arRet: append($arRet, $prefix + $e, comma);
    }
  }
  @return $arRet;
}
@function get-modificated ($elems: null, $modifier: null) {
  $arRet: $elems;
  @if $modifier {
    $arRet: ();
    $c: ':' '.' '[';
    @each $mod in $modifier {
      $add: if(index($c, str-slice(if($mod, $mod, ' '), 1, 1)) != null, $mod,
              if($mod, $separator_modification + $mod, '')
      );
      @each $elem in $elems {
        $arRet: append($arRet, $elem + $add, comma);
      }
    }
  }
  @return $arRet;
}

@function name ($elems: null, $modifier: null, $start: 1, $end: null) {
  $space: unquote(get-namespace($start: $start, $end: $end));
  @return get-modificated(get-elements($space, $elems), $modifier);
}

@mixin name ($elems: null, $modifier: null, $start: 1, $end: null) {
  #{name($elems: $elems, $modifier: $modifier, $start: $start, $end: $end)} {
    @content;
  }
}
@mixin name-up ($elem: null, $modifier: null) {
  @include namespace-up {
    #{name($elem: $elem, $modifier: $modifier)} {
      @content;
    }
  }
}
@mixin name-down ($elem: null, $modifier: null) {
  @include namespace-down {
    #{name($elem: $elem, $modifier: $modifier)} {
      @content;
    }
  }
}
@mixin namespace ($component, $enable: true) {
  $_namespaces: append($_namespaces, $component) !global;
  @if $enable {
    @content;
  }
  $new: ();
  @if length($_namespaces) > 1 {
    @for $i from 1 through length($_namespaces) - 1 {
      $new: append($new, nth($_namespaces, $i));
    }
  }
  $_namespaces: $new !global;
}
@mixin namespace-up ($level: 1) {
  $old: $_namespaces;
  $new: ();
  @if length($_namespaces) > 1 {
    @for $i from 1 through length($_namespaces) - $level {
      $new: append($new, nth($_namespaces, $i));
    }
  }
  $_namespaces: $new !global;
  @content;
  $_namespaces: $old !global;
}
@mixin namespace-down ($level: 2) {
  $old: $_namespaces;
  $new: ();
  @if length($_namespaces) > 1 {
    @for $i from $level through length($_namespaces) {
      $new: append($new, nth($_namespaces, $i));
    }
  }
  $_namespaces: $new !global;
  @content;
  $_namespaces: $old !global;
}
@mixin separator ($namespace: null, $name: null, $modification: null) {
  $_oldNS: $separator_namespace;
  $_oldN: $separator_name;
  $_oldM: $separator_modification;
  $separator_namespace: $namespace !global;
  $separator_name: $name !global;
  $separator_modification: $modification !global;
  @content;
  $separator_namespace: $_oldNS !global;
  $separator_name: $_oldN !global;
  $separator_modification: $_oldM !global;
}
